# [678. 有效的括号字符串](https://leetcode-cn.com/problems/valid-parenthesis-string/)

# 题目描述：

给定一个只包含三种字符的字符串：（ ，） 和 *，写一个函数来检验这个字符串是否为有效字符串。有效字符串具有如下规则：

1. 任何左括号 ( 必须有相应的右括号 )。
2. 任何右括号 ) 必须有相应的左括号 ( 。
3. 左括号 ( 必须在对应的右括号之前 )。
4. * 可以被视为单个右括号 ) ，或单个左括号 ( ，或一个空字符串。
5. 一个空字符串也被视为有效字符串。




**示例1：**

```
输入: "()"
输出: True
```

**示例2：**

```
输入: "(*)"
输出: True
```

**示例 3:**

```
输入: "(*))"
输出: True
```



# 解答：

## C++：

### 方法一：栈

> 用两个栈分别存储(与\*的下标，从头遍历字符串，遇到(与\*分别将其下标压入对应的栈中，遇到）先判断（的栈是否为空，不为空弹出栈顶，即符合匹配，若（的栈为空，则判断\*的栈是否为空，不为空弹出栈顶，即当作）符合匹配，若\*的栈为空，返回false，即无法与）匹配。
>
> 上述判断结束后，看（栈是否为空，不为空则看\*栈是否为空，也不为空看他俩是否可以匹配，匹配条件是（栈顶下标小于*栈顶下标，具体代码如下：

```cpp
class Solution {
public:
    bool checkValidString(string s) {
        vector<stack<int>> ST(2);
        for(int i=0;i<s.size();++i){
            if(s[i]=='('){
                ST[0].push(i);
            }else if(s[i]=='*'){
                ST[1].push(i);
            }else{
                if(!ST[0].empty()) ST[0].pop();
                else if(!ST[1].empty()) ST[1].pop();
                else {
                    return false;
                }
            }
        }

        while(!ST[0].empty()&&!ST[1].empty()){
            if(ST[0].top()<ST[1].top()){
                ST[0].pop();
                ST[1].pop();
            }else {
                return false;
            }
        }

        return ST[0].empty();
    }
};
```

### 方法二：贪心算法，一次遍历

> 从左到右遍历字符串，遍历过程中，未匹配的左括号数量可能会出现如下变化：
>
> 1. 如果遇到左括号，则未匹配的左括号数量加 1；
>
> 2. 如果遇到右括号，则需要有一个左括号和右括号匹配，因此未匹配的左括号数量减 1；
>
> 3. 如果遇到星号，由于星号可以看成左括号、右括号或空字符串，因此未匹配的左括号数量可能加 1、减 1或不变。
>
> 维护一个最小值，一个最大值，表示未匹配左的数量：
>
> 1. 如果遇到左括号，则将最小值和最大值分别加 1；
>
> 2. 如果遇到右括号，则将最小值和最大值分别减 1；
>
> 3. 如果遇到星号，则将最小值减 1，将最大值加 1。
>
> 未匹配的左括号数量非负，因此当最大值变成负数时，说明没有左括号可以和右括号匹配，返回 false。
>
> 当最小值为 0 时，不应将最小值继续减少，以确保最小值非负。这里解释下为什么最小值可以为非负也必须为非负:
>
> 1. 未匹配的左括号数量非负,最小值表示未匹配左的数量
> 2. 若没有*号出现，最小值与最大值则在未出现没有左括号可以和右括号匹配时值相同，出现后最小值为0，最大值为负数，返回 false。即最大值判断遍历过程中左括号是否能与右括号匹配的，而最小值是判断左括号是否还有未匹配的，即返回值是`return minCount == 0;`而遍历过程中：
> `if (maxCount < 0) {`
>     `return false;`
>`}`


```cpp
class Solution {
public:
    bool checkValidString(string s) {
        int minCount = 0, maxCount = 0;
        int n = s.size();
        for (int i = 0; i < n; i++) {
            char c = s[i];
            if (c == '(') {
                minCount++;
                maxCount++;
            } else if (c == ')') {
                minCount = max(minCount - 1, 0);
                maxCount--;
                if (maxCount < 0) {
                    return false;
                }
            } else {
                minCount = max(minCount - 1, 0);
                maxCount++;
            }
        }
        return minCount == 0;
    }
};
```

## JavaScript
